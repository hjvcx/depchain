#!/usr/bin/python3
'''
Usage:
    depchain.py [options] <file> [<package>]

Options:
    -h, --help          Open this message.
    -v, --version       Version check and finish program execution.
'''

from docopt import docopt
import sys
import subprocess
import networkx as nx
import matplotlib.pyplot as plt
import gzip
import os

already_shown = list()
G = nx.DiGraph()
nodes = list()

def get_package_dependencies(package_name):
    if package_name not in already_shown:
        already_shown.append(package_name)
    else:
        return

    print(package_name)
    if package_name not in nodes:
        nodes.append(package_name)
        G.add_node(package_name)

    if package_name in set(packages_list):
        pindex = packages_list.index(package_name)
        for d in depends_list[pindex].split(', '):
            if d:
                print(d)
                if d not in nodes:
                    nodes.append(d)
                    G.add_node(d)
                G.add_edge(package_name, d)
                get_package_dependencies(d)
    else:
        command = ["apt-cache", "depends", package_name]
        env = {"LANG": "en_US.UTF-8"}
        try:
            lines = subprocess.check_output(command, env=env).decode("utf-8").splitlines()

            depends_lines = list()
            for line in lines:
                if '  Depends:' in line or ' |Depends:' in line:
                    dline = line[11:]
                    if dline[0] == '<':
                        dline = dline[1:-1]
                    depends_lines.append(dline)
                    if dline not in nodes:
                        nodes.append(dline)
                        G.add_node(dline)

            for line in depends_lines:
                G.add_edge(package_name, line)

            if depends_lines:
                print(depends_lines)
            print()

            if depends_lines:
                for line in depends_lines:
                    get_package_dependencies(line)

        except subprocess.CalledProcessError:
            print('Something went wrong...', file=sys.stderr)
            sys.exit(1)

def arg_parse():
    global args
    args = docopt(__doc__)

    if args['--version']:
        print('depchain v1.0.0')
        sys.exit()

    global file
    try:
        file = gzip.open(args['<file>'], 'rt')
    except:
        print('Error. No file found:', args['<file>'], file=sys.stderr)
        sys.exit(1)

def get_pd_lists(contents):
    plist = list()
    dlist = list()
    dfound = False

    for c in contents:
        if 'Package: ' in c:
            plist.append(c[9:])
        if 'Depends: ' in c:
            dlist.append(c[9:])
            dfound = True
        if c == '' and not dfound:
            dlist.append('')

    return plist, dlist

def main():
    arg_parse()

    contents = file.readlines()

    if not os.path.isfile('ptest'):
        with open('ptest', 'w') as f:
            for c in contents:
                f.write(c)


    pfilename = args['<file>'] + '.p'
    dfilename = args['<file>'] + '.d'
    global packages_list
    global depends_list
    if not os.path.isfile(pfilename):
        packages_list, depends_list = get_pd_lists(contents)
        with open(pfilename, 'w') as f:
            for p in packages_list:
                f.write(p)
        with open(dfilename, 'w') as f:
            for d in depends_list:
                f.write(d)
    else:
        with open(pfilename, 'r') as f:
            packages_list = f.readlines()
        with open(dfilename, 'r') as f:
            depends_list = f.readlines()

    if args['<package>']:
        get_package_dependencies(args['<package>'])
    else:
        print('Available packages to find dependency chains:')
        for p in packages_list:
            print(p.strip('\n\r'))
        return

    pos = nx.spring_layout(G, k=1.5)
    nx.draw(G, pos, with_labels=True, node_color='lightblue', edge_color='gray', node_size=5000)
    plt.show()

main()