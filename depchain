#!/usr/bin/python3
'''
Usage:
    depchain.py [options] <file> [<package>]

Options:
    -h, --help          Open this message.
    -v, --version       Version check and finish program execution.
'''

from docopt import docopt
import sys
import subprocess
import networkx as nx
import matplotlib.pyplot as plt
import gzip
import os
from pprint import pprint
import re

def arg_parse():
    global args
    args = docopt(__doc__)

    if args['--version']:
        print('depchain v1.0.0')
        sys.exit()

    global file
    try:
        file = gzip.open(args['<file>'], 'rt')
    except:
        print('Error. No file found:', args['<file>'], file=sys.stderr)
        sys.exit(1)

def find_pack_dep(string):
    package_match = re.search(r'Package:\s(.*?)\n', string)
    depends_match = re.search(r'Depends:\s(.*?)\n', string)

    try:
        if package_match:
            package = package_match.group(1)
        else:
            package = 'NO_PACKAGE_NAME'

        if depends_match:
            depends = depends_match.group(1)
        else:
            depends = 'NO_DEPENDS_FOUND'
    except:
        print("Error, Try Again", file=sys.stderr)

    return package, depends

def read_packages(filename):
    with gzip.open(filename, 'rt') as file:
        data = file.read()
        package_records = re.split(r'\n\n', data)

    return package_records

def flatten_list(nested_list):
    flattened_list = []

    for sublist in nested_list:
        if isinstance(sublist, list):
            flattened_list.extend(sublist)
        else:
            flattened_list.append(sublist)

    return flattened_list

def rstrip_any(o_list):
    for i in range(len(o_list)):
        if o_list[i].endswith(":any"):
            o_list[i] = o_list[i].rstrip(":any")

    return o_list

def print_dep(package_name):
    if package_name in pack_dep and package_name not in already_shown:

        already_shown.append(package_name)
        print(package_name, ':', pack_dep[package_name])
        print()
    else:
        return

    for dep in pack_dep[package_name]:
        print_dep(dep)

def main():
    arg_parse()

    # Открываем gz файл и делим данные пакетов
    packages_info = read_packages('Packages.gz')

    # Создаем словарь где ключ название пакета, а значение его Depends
    global pack_dep
    pack_dep = {}
    for i in range(len(packages_info)):
        key, value = find_pack_dep(packages_info[i]) # packages depends full

        try:
            value = value.split(', ')
        except:
            print(value)
            sys.exit(1)

        for i in range(len(value)):
            if '|' not in value[i]:
                value[i] = value[i].split()[0] # xxx (qqq) -> xxx
            else:
                value[i] = value[i].split(' | ') # xxx | ccc -> [xxx, ccc]
                for j in range(len(value[i])):
                    value[i][j] = value[i][j].split()[0] # xxx (qqq) -> xxx

        value = flatten_list(value) # [[z], [x, c], v] -> [z, x, c, v]

        value = rstrip_any(value) # python3:any -> python3

        value = list(set(value)) # [qqq, qqq, www] -> [qqq, www]

        pack_dep[key] = value

    if not os.path.exists('packages_dict'):
        with open('packages_dict', 'w') as file:
            pprint(pack_dep, stream=file)

    global already_shown
    already_shown = list()
    print_dep(args['<package>'])

main()